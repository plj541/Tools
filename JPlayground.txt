0!:100 jPlay=: 0 : 0
9!:7'+++++++++|-'
(<~.'plj'; 18!:2 <'base') 18!:2&> <"0 ;:'base pj'

NB. Attempt to make wcsize relevant to browser window size 
wcsize_z_=: {{<.17 12%~ ".2!:0 '(""+window.innerWidth)+(" "+window.innerHeight)'}}

cocurrent'plj'

NB. J-Playground verbs for using JavaScript in the browser
Say=: {{
 NB. Should display an intermediate value
 y 1!:2 [2
}}

Ask=: {{
 NB. Web replacement for  1!:1 [1
 '' Ask y
:
 3}. Say '   ', 2!:0 'prompt("', y, '", "', '")',~ jsEnc_pj_ x [Say y
}}

File=: {{
 2!:0 'window.localStorage.getItem("', y, '")'
:
 y [2!:0 'window.localStorage.setItem("', y, '","', '")',~ jsEnc_pj_ x
}}

Files=: {{
 myItems=. ''
 for_index. i.". 2!:0 '""+ window.localStorage.length' do.
  myItems=. myItems, <2!:0 'window.localStorage.key(', ')',~ ":index
 end.
 Across myItems/: Keys myItems
:
 2!:0 'window.localStorage.removeItem("', '")',~ jsEnc_pj_ x
 'Removed'
}}

Edit=: {{
 2!:0 'ecm.getDoc().getValue()'
:
 2!:0 'ecm.getDoc().setValue("', '")',~ jsEnc_pj_ x
}}

Link=: {{
 2!:0 'window.open("', '")',~ y
}}

Page=: {{
 URL_httpget_=: y
 2!:0 httpgetJS_jpacman_
 RESPONSE_httpget_
}}

NB. Simplistic demo start and step through
Next=: {{
 if. ' '= {.0$ y do. y=. 0 [next_pj_=: <;._1 File y end.
 if. y< #next_pj_ do. 
  now=. ;y{ next_pj_
  if. ']'= {.now do. Do }.now
  else. ''[ Say now end.
  if. (y=. >:y)< #next_pj_ do. 'Next ', ":y end.
 else. 'NB. That''s all folks!' end.
}}

NB. Handle error or stop with JavaScript prompt and alert
Debug=: {{
 if. '".'-: 5!:5 <'u' do.
  while. '*'e. {."1 [13!:18'' do.  NB. 3< #13!:18 '' do.
   if. #line_pj_ do. 2!:0 'alert ("', '")',~ jsEnc_pj_ line_pj_ end. 
   9!:29 [1 [9!:27 '". Debug' [line_pj_=: ''
   try.
    select. ;2{. part_pj_=: ;:line_pj_=: Ask 'Enter Debug Request'
     case. ']help'   do. more_pj_ HELP_pj_
     case. ']error'  do. more_pj_ 13!:12 ''
     case. ']stack'  do. more_pj_ 2}. _2}. 13!:18 ''
     case. ']locals' do. more_pj_ (2 2$ 0 3 7 8{ ])"1 }.13!:13 ''
     case. ']resume' do. u. '13!:4 i.0' return.
     case. ']next'   do. u. '13!:5 i.0' return.
     case. ']return' do. u. '13!:6 ]'arg_pj_ return.
     case. ']stop'   do. u. '13!:3 ]'arg_pj_ return.
     case. ']quit'   do. 13!:0 [0 [9!:29 [0 return.
     case. do.
      if. #part_pj_ do. resp_pj_=: u. line_pj_
       if. #resp_pj_ do. more_pj_ resp_pj_
       elseif. _1 e. 4!:0 part_pj_ do. 0!:101 line_pj_
       else. more_pj_ '' end.
      end.
    end.
   catch.
    more_pj_ 13!:12 ''
   end.
  end.
 else. NB. Setup
  line_pj_=: ''
  if. -.13!:17 '' do. 13!:0 [1 end. NB. Suspend on an error
  9!:29 [1 [9!:27 '". Debug'
 end.
}}

arg_pj_=: {{
 cmd=. ;1{ part_pj_
 m, line_pj_}.~ (#cmd)+ cmd I.@E. line_pj_
}}

more_pj_=: {{'' [line_pj_=: 'Request: ', line_pj_, LF, 'Response:', LF, displayLines_pj_ Say y}}

HELP_pj_=: {{)n
 ]help    NB. This list of commands
 ]error   NB. The most recent error message
 ]stack   NB. The execution stack
 ]locals  NB. Locals at each level of the execution stack
 ]resume  NB. Resume execution on the failing line
 ]next    NB. Resume execution on the next line
 ]return  NB. Stopped verb returns value, e.g.  541
 ]stop    NB. Set stops, e.g.  'fun mon:dia'
 ]quit    NB. Turn off debugging
 NB. Anything else is evaluated, including assignments
}}

jsEnc_pj_=: {{y Replace ForEach 2 '\';'\\';'"';'\"';LF;'\n';CR;'\r';TAB;'\t'}}

NB. View definitions of names
Vr=: {{
 NB. Visual Representation
 if. 0= 4!:0<y do. t=. (":$d), '$ of data type:  ', datatype d=. ".y
  LF,~ 'NB. ', y, ('=: '''''}.~ _2* '$'~: {.t), t, LF, displayLines_pj_ d
 else. t=. >('1234'i. {.d){ ')a'; ')c'; ''; ')d'; 'X' [d=. 5!:5 <y
  if. ' : '-: 3{.}.d do. e=. 4{. }.d
   if.     ' : 0'-:  e do. d=. }:d}.~ #e=. (d i. LF){. d=. 5}. d
   elseif. ' : '''-: e do. d=. ".d}.~ -#e=. (>:d i: '''')}. d=. 4}. d
   elseif. ' : ('-:  e do. d=. 4}. d
    if. (;:')"(')+./@E. ;:d do. d=. d}.~ -#e=. d}.~ >:1 i:~ ') " ('E. d
    else. d=. d}.~ -#e=. (>:d i: ')')}. d end.
    d=. LF,LF,~ LF Join~ ". d
   else. ^'DOMAIN ERROR' end.  NB. Unrecognized
   LF,~ y, '=: {{', t, d, '}}', e
  else. LF,~ y, '=: ', d end.
 end.
}}

displayLines_pj_ =: {{
 NB. Format an array as a vector
 if. 0~: L. y do. NB. Correct appearance of LF in first level boxes
  fix=. LF&e. &> rav=. ,y
  y=. ($y)$ (,y) (I.fix)}~ ([:>;._2 (10{a.),~ ])&.> rav#~ fix
 end.
 y=. ": y
 if. 0< r=. _1+ #$ y do.
  NB.      {{,"2 y,"1 x}}
  (-r)}. LF ([:,"2 ,"1~)^: r y
 else.
  ,y
 end.
}}

NB. String verbs with .Net names
Join=: ([:; [:}. [:,[ ,.~ [:<])" 1
WhiteSpace=: WS=: 32 13 10 9{ a.
TrimStart=: ([#~ [:-. [:*./\ e.)" 1
TrimEnd=: ([#~ [:-. [:*./\. e.)" 1
Trim=: (TrimStart TrimEnd ])" 1
StartsWith=: (([:,])-: [{.~ <.&#)" 1
EndsWith=: (([:,])-: [{.~ [:-([:#[)<. [:#])" 1

Split=: {{
 NB. Split x into boxes at each y
 if. ''-: x do. ,a: return. end.
 if. ''-: y do. ,<,x return. end.
 if. 1= #y do.
  <;._2 x, y
 else.
  if. #now=. x noOverlap_pj_ y do.
   (x{.~ {.now); (#y)}. &.> now indexCut_pj_ x
  else.
   ,<,x
  end.
 end.
}}" 1

Replace=: {{
 NB.    Usage: text Replace old; new
 NB. Multiple: text Replace ForEach 2 ;:'this that now then'
 'old new'=. y
 now=. x noOverlap_pj_ old
 if. #now do.
  if. 1 1-: #&> old; new do.
   x now}~ {.new
  else.
   ;(x{.~ {.now); (#old) new &,@}. &.> now indexCut_pj_ x
  end.
 else.
  x
 end.
}} " 1

ForEach=: {{
 NB. Usage: verb ForEach eachSize multipleEachSizeArgs
:
 if. _ -.@-: n=. {.,n do.  NB. When n is _, y must already be grouped
  y=. |. <"1 (n,~ n%~ #y) $ y=. ,y  NB. Box arguments n at a time
 end.
 > u~ &.>/ y, <x
}}

indexCut_pj_=: {{
 NB. Cut with x as indexes instead of booleans
 y <;.1~ 1 x} 0#~ #y
}}

NB. Code from: https://code.jsoftware.com/wiki/Essays/Substring_Replacement
NB. Similar to: text nosindx~ old
noOverlap_pj_=: {{
 NB. Find non-overlapping indexes of y in x
 if. ''-: y do. i. 0 return. end.
 now=. y I.@E. x
 if. 2= y +/@E. y, y do. now  NB. Cannot overlap
 else. all=. now I. now+ #y
  (i.&_1{.]) (now, _1){~ (all, _1){~ ^:a: 0
 end.
}}

Diff=: {{
 NB. Usage: x [m] Diff n y
 m '' Diff n y
:
 n=. 2$ n  NB. n should be ⎕IO for x and y, 1 for external editors, 0 for J nouns
 x=. boxedLines_pj_ x [y=. boxedLines_pj_ y
 if. x-: y do. 'They are identical' return. end.
 if. m-: '' do. m=. ',Old lines,New lines' end.
 label=. ' ↑ ', old, ' --   -- ↓ ', new, LF ['old new'=. <;._1 m
 label=. label,~ '-'#~ #":#x ['old new'=. n
 (x old diffLines_pj_ y), label, y new diffLines_pj_ x
}}

boxedLines_pj_=: {{
 NB. Provide boxed lines from one of three possible formats
 if. L. y do. y                  NB. Already boxed lines
 elseif. LF e. y do. y Split LF  NB. Contains LF's
 else. LF Split~ File y end.     NB. A file name
}}

diffLines_pj_=: {{
 NB. Display lines which are missing in the other version, m is ⎕IO
:
 'No lines are missing', LF  NB. Which lines in x are missing in y
 if. 0~: #gone=. (i=. z= #y)# x [z=.y i. x do.
  ;(<"1 ' | ',"1~ ":,. m+ I. i),. gone,. <LF
 end. 
}}

NB. Output display verbs
Across=: {{
 2 foldBoxes_pj_ y
}}

Fmt=: {{
 NB. -    +   -   +  mp Before; nq After; b[zero]; d[nill]; r[fill]
 'm[ (]p[  ]n[)]q[ ]c0.2' Fmt y
:
 if. 0 e. $y do. ''$~ $y return. end.
 if. L. x do.
  x=. }: ;(<'m[ (]p[  ]n[)]q[ ]⍕,') Replace&.> <"1 x,.~ <'⍕'
 end.
 x 8!:2 y
}}

Keys=: {{
 keys=. (('                                 ''''((((''(((''''''''''''''''(abcdefghijklmnopqrstuvwxyz(((''''abcdefghijklmnopqrstuvwxyz(('''{~ ]), '                                05389AC4146BA17A012345678989DCF67111111111111111111111111112C3B02000000000000000000000000000B5DF'{~ ])
 ([:keys a.i. ])"1 >y
}}

Unbox=: {{
 NB. Remove boxing characters from result
 was=. 9!:6 ''
 9!:7 [11# rep=. 30{ a.
 9!:7 was [now=. ": <y
 now=. 1 1}. _1 _1}. now
 rho=. $now=. (-.*./"1 now= rep)# now 
 rho$ ' ' (I. now= rep)} now=. ,now
}}

foldBoxes_pj_=: {{
 NB. Format the disclose of boxed characters into lines
 insert=. _1+ +/\ |. (m+ {.wcsize_z_'') foldBoxes_pj_/ |. 0, 0,~ m+ #&> y
 (->:m)}. LF insert }'X',~ ;y ,&.> <m# ' '
:
 if. m> next=. x+ {.y do. next, }.y
 else. x, y end.
}}

NB. Utility combinations with names I can remember
Do=: {{
 0!:101 y
:
 if. x-: y do. x=. 100 end.
 0!:x y
}}

Names=: {{
 NB. List names, ''=all, 0=noun, 1=adverb, 2=conjunction, 3=verb
 Across (/:Keys)~ (;:'y')-.~ 4!:1 y, (y-: '')# i.4
:
 NB. List locales, ''=all, 0=named, 1=numbered
 Across (/:Keys)~ 18!:1 y, (y-: '')# i.2
}}

Erase=: {{
 4!:55 ([: ,;: ::]) y
:
 18!:55 ".&> y=. ([: ,;: ::]) y
  4!:55 y
}}

cocurrent 'base'
)

jPlay File 'jPlayInit'  NB. Save this version