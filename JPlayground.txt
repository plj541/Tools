NB. This version was written before some of this
NB. was added to the default JPlayground session.
NB. I am no longer updating this version.

NB. Since File and Page are now available to all users,
NB. this self-installing file is no longer needed.
0!:100 jPlay=: 0 : 0
(<~.'plj'; 18!:2 <'base') 18!:2&> <"0 ;:'base pj'

cocurrent'plj'

NB. Attempt to make wcsize relevant to browser window size 
wcsize=: {{<.17 12%~ ". 2!:0 'window.innerWidth+" "+window.innerHeight'}}

NB. J-Playground verbs for using JavaScript in the browser
Say=: {{
 NB. Should display an intermediate value
 y 1!:2 [2
}}

Ask=: {{
 NB. Web replacement for  1!:1 [1
 '' Ask y
:
 3}. Say '   ', 2!:0 'prompt("', y, '", "', '")',~ jsEnc_pj_ x [Say y
}}

File=: {{
 2!:0 'window.localStorage.getItem("', y, '")'
:
 y [2!:0 'window.localStorage.setItem("', y, '","', '")',~ jsEnc_pj_ x
}}

Files=: {{
 if. -.y-: myItems=. '' do. [:'y must be empty' end.
 for_index. i.". 2!:0 '""+ window.localStorage.length' do.
  myItems=. myItems, <2!:0 'window.localStorage.key(', ')',~ ":index
 end.
 Across (/:Keys) myItems
:
 2!:0 'window.localStorage.removeItem("', '")',~ jsEnc_pj_ x
}}

Edit=: {{
 if. -.y-: '' do. [:'y must be empty' end.
 2!:0 'ecm.getDoc().getValue()'
:
 2!:0 'ecm.getDoc().setValue("', '")',~ jsEnc_pj_ x
}}

Link=: {{
 2!:0 'window.open("', '")',~ y
}}

Page=: {{
 URL_httpget_=: y
 2!:0 httpgetJS_jpacman_
 RESPONSE_httpget_
}}

NB. Handle error or stop with JavaScript prompt and alert
debug=: {{
 if. '".'-: 5!:5 <'u' do.  NB. Debugging
  if. '*'e. {."1 [13!:18 '' do. line_pj_=: 13!:12 ''
  else. 13!:0 [0 return. end.
  while. '*'e. {."1 [13!:18'' do. 9!:29 [1 [9!:27 '". debug'
   if. #line_pj_ do. 2!:0 'alert ("', '")',~ jsEnc_pj_ line_pj_ end. 
   try.
    select. ;2{. part_pj_=: ;:line_pj_=: Ask 'Enter a debug request'
     case. ']debug'  do.
     case. ']help'   do. more_pj_ HELP_pj_
     case. ']alert'  do. more_pj_ 13!:12 ''
     case. ']stack'  do. more_pj_ 2}. _2}. 13!:18 ''
     case. ']locals' do. more_pj_ (2 2$ 0 3 7 8{ ])"1 }.13!:13 ''
     case. ']resume' do. 13!:4 '' return.
     case. ']next'   do. 13!:5 '' return.
     case. ']return' do. 13!:6 u. ]arg_pj_ return.
     case. ']stop'   do. 13!:3 []arg_pj_
     case. ']stops'  do. more_pj_ 13!:2 ''
     case. ']quit'   do. 13!:0 [0 [9!:29 [0 return.
     case. do.
      if. #part_pj_ do. resp_pj_=: u. line_pj_
       if. #resp_pj_ do. more_pj_ resp_pj_
       elseif. _1 e. 4!:0 part_pj_ do. 0!:101 line_pj_
       else. more_pj_ '' end.
      end.
    end.
   catch.
    more_pj_ 13!:12 ''
   end.
  end.
 else. NB. Setup
  line_pj_=: ''
  if. -.13!:17 '' do. 13!:0 [1 end. NB. Suspend on an error
  9!:29 [1 [9!:27 '". debug'
 end.
}}

Cr=: {{
 NB. Displays lines with line numbers used during debugging
 mon=. y Cr~ <1 [dia=. y Cr~ <2 [y=. ,y
 cr=. y, (>{:mon), (,':'), >{:dia
 ln=. 'p<[>q<] >0'8!:2 ,.(>{.mon), _, >{.dia
 ln=. ' ', ln (<0;~ #>{.mon)}~ ' '
 ln,. cr
:
 cr=. md (5!:7) <y [md=. >x
 if. 0= #cr do. (i.0); 0 0$ '' return. end.
 line=. {:&> 1{"1 cr
 lines=. i.>:{:line
 lines=. lines#~ lines e. line 
 cr=. ' ' Join~ (lines =/line)#"1 [2{"1 cr
 if. md~: x do. lines; cr
 else. (y, cr),.~ (3": md), 'p<[>q<] >0'8!:2 ,.lines end.
}}

Local=: {{
 NB. Run u with local definition y on stack
 '' u Local y
:
 find=. {{if. (#y)~: in=. ({."1 y)i. <m do. ;x{ in{ y else. '' end.}} 
 stk=. 13!:13 '' [was=. 18!:5 ''
 if. ''-: name=. 4 y find stk do. name=. 1 y find ;7{ 1{stk end.
 if. ''-: name do. 'Name not found' return. end.
 18!:4 PS [Do~ (y, '__PS=: '), name
 if. x-: '' do. now=. u y
 else. now=. x u y end.
 now [18!:4 was
}}

arg_pj_=: {{)a
 cmd=. ;1{ part_pj_
 line_pj_}.~ (#cmd)+ {.cmd I.@E. line_pj_
}}

more_pj_=: {{'' [line_pj_=: 'Request: ', line_pj_, LF, 'Response:', LF, displayLines_pj_ Say y}}

HELP_pj_=: }:{{)n
 ]help    NB. This list of commands
 ]alert   NB. The most recent message from an error or stop
 ]stack   NB. The execution stack
 ]locals  NB. Locals at each level of the execution stack
 ]resume  NB. Resume the current line
 ]next    NB. Restart on the next line
 ]return  NB. Return the value provided, e.g.  ]return 541
 ]stop    NB. Set lines to stop on, e.g.  ]stop fun 3:2
 ]stops   NB. Report current stops
 ]quit    NB. Turn off debugging
 NB. Anything else is evaluated, including assignments to your locals
}}

jsEnc_pj_=: {{y Replace ForEach 2 '\';'\\';'"';'\"';LF;'\n';CR;'\r';TAB;'\t'}}

NB. View definitions of names
Vr=: {{
 NB. Visual Representation
 if. 0= 4!:0<y do. t=. (":$d), '$ of data type:  ', datatype d=. ".y
  LF,~ 'NB. ', y, ('=: '''''}.~ _2* '$'~: {.t), t, LF, displayLines_pj_ d
 else. t=. >('1234'i. {.d){ ')a'; ')c'; ''; ')d'; 'X' [d=. 5!:5 <y
  if. ' : '-: 3{.}.d do. e=. 4{. }.d
   if.     ' : 0'-:  e do. d=. }:d}.~ #e=. (d i. LF){. d=. 5}. d
   elseif. ' : '''-: e do. d=. ".d}.~ -#e=. (>:d i: '''')}. d=. 4}. d
   elseif. ' : ('-:  e do. d=. 4}. d
    if. (;:')"(')+./@E. ;:d do. d=. d}.~ -#e=. d}.~ >:1 i:~ ') " ('E. d
    else. d=. d}.~ -#e=. (>:d i: ')')}. d end.
    d=. LF,LF,~ LF Join~ ". d
   else. ^'DOMAIN ERROR' end.  NB. Unrecognized
   LF,~ y, '=: {{', t, d, '}}', e
  else. LF,~ y, '=: ', d end.
 end.
}}

displayLines_pj_ =: {{
 NB. Format an array as a vector
 if. 0~: L. y do. NB. Correct appearance of LF in first level boxes
  fix=. LF&e. &> rav=. ,y
  y=. ($y)$ (,y) (I.fix)}~ ([:>;._2 (10{a.),~ ])&.> rav#~ fix
 end.
 y=. ": y
 if. 0< r=. _1+ #$ y do.
  NB.      {{,"2 y,"1 x}}
  (-r)}. LF ([:,"2 ,"1~)^: r y
 else.
  ,y
 end.
}}

NB. String verbs with .Net names

Split=: {{
 NB. Split x into boxes at each y
 if. ''-: x do. 0# a: return. end.
 if. ''-: y do. <@,"0 x return. end.
 if. 1= #y do.
  <;._2 x, y
 else.
  if. #now=. x noOverlap_pj_ y do.
   (x{.~ {.now); (#y)}. &.> now indexCut_pj_ x
  else.
   ,<,x
  end.
 end.
}} " 1

NB. Put y between each box of x
NB.    (  ;   }.   ,x ,.~   <y) " 1
Join=: ([:; [:}. [:,[ ,.~ [:<]) " 1

NB. White space for HTML and XML
WhiteSpace=: WS=: 32 13 10 9{ a.

NB. Trim characters at the start
NB.         (x#~   -.   *./\ x e. y) " 1
TrimStart=: ([#~ [:-. [:*./\   e.  ) " 1

NB. Trim characters at the end
NB.       (x#~   -.   *./\. x e. y) " 1
TrimEnd=: ([#~ [:-. [:*./\.   e.  ) " 1

NB. Trim characters at the start and end
NB.    ((x TrimStart y) TrimEnd y) " 1
Trim=: (   TrimStart    TrimEnd ]) " 1
Trim=: Trim f.

NB. Does x start with y
NB.          ((  ,y)-: x{.~ x <.&# y) " 1
StartsWith=: (([:,])-: [{.~   <.&#  ) " 1

NB. Does x end with y
NB.        ((  ,y)-: x{.~   -(  #x)<.   #y) " 1
EndsWith=: (([:,])-: [{.~ [:-([:#[)<. [:#]) " 1

Replace=: {{
 NB.    Usage: text Replace old; new
 NB. Multiple: text Replace ForEach 2 ;:'this that now then'
 'old new'=. y
 if. 1 1-: #&> y do. x (x I.@e. old)}~ {.new
 else. new Join~ x Split old end.
}} " 1

ForEach=: {{
 NB. Usage: left verb ForEach eachSize multipleEachSizeArgs
 if. _ -.@-: n=. {.,n do.  NB. When n is _, y must already be grouped
  y=. |. <"1 (n,~ n%~ #y) $ y=. ,y  NB. Box arguments n at a time
 end.
 > u~ &.>/ y, <x
}}

NB. Support for strings

indexCut_pj_=: {{
 NB. Cut with x as indexes instead booleans
 y <;.1~ 1 x} 0#~ #y
}}

noOverlap_pj_=: {{
 NB. Find non-overlapping indexes of y in x
 NB. Code from: https://code.jsoftware.com/wiki/Essays/Substring_Replacement
 NB. Similar to: text nosindx~ old
 if. ''-: y do. i. 0 return. end.
 now=. y I.@E. x
 all=. now I. now+ #y
 (i.&_1{.]) (now, _1){~ (all, _1){~ ^:a: 0
}}

Diff=: {{
 NB. Usage: x [m] Diff n y
 m '' Diff n y
:
 n=. 2$ n  NB. n should be ⎕IO for x and y, 1 for external editors, 0 for J nouns
 x=. boxedLines_pj_ x [y=. boxedLines_pj_ y
 if. x-: y do. 'They are identical' return. end.
 if. m-: '' do. m=. ',Old lines,New lines' end.
 label=. ' ↑ ', old, ' --   -- ↓ ', new, LF ['old new'=. <;._1 m
 label=. label,~ '-'#~ #":#x ['old new'=. n
 (x old diffLines_pj_ y), label, y new diffLines_pj_ x
}}

boxedLines_pj_=: {{
 NB. Provide boxed lines from one of three possible formats
 if. L. y do. y                  NB. Already boxed lines
 elseif. LF e. y do. y Split LF  NB. Contains LF's
 else. LF Split~ File y end.     NB. A file name
}}

diffLines_pj_=: {{
 NB. Display lines which are missing in the other version, m is ⎕IO
 'No lines are missing', LF  NB. Which lines in x are missing in y
 if. 0~: #gone=. (i=. z= #y)# x [z=.y i. x do.
  ;(<"1 ' | ',"1~ ":,. m+ I. i),. gone,. <LF
 end. 
}}

NB. Output display verbs
Across=: {{({.wcsize '')foldtext y Join '  '}}

Fmt=: {{
 NB. -    +   -   +  mp Before; nq After; b[zero]; d[nill]; r[fill]
 'm[ (]p[  ]n[)]q[ ]c0.2' Fmt y
:
 if. 0 e. $y do. ''$~ $y return. end.
 if. L. x do.  NB. Format each column as Financial
  x=. }: ;(<'m[ (]p[  ]n[)]q[ ]⍕,') Replace&.> <"1 x,.~ <'⍕'
 end.
 x 8!:2 y
}}

Keys=: {{
 keys=. (('                                 """""""""""""""##########"""""""abcdefghijklmnopqrstuvwxyz""""""abcdefghijklmnopqrstuvwxyz""""'{~ ]), '000000000000000000000000000000000b3pqmv256lkg1ds0123456789efihjcu111111111111111111111111118t7n04000000000000000000000000009oar0'{~ ])
 ([:keys a.i. ])"1 >y
}}

Unbox=: {{
 NB. Remove boxing characters from result
 was=. 9!:6 ''
 9!:7 [11# rep=. 30{ a.
 9!:7 was [now=. ": <y
 now=. 1 1}. _1 _1}. now
 rho=. $now=. (-.*./"1 now= rep)# now 
 rho$ ' ' (I. now= rep)} now=. ,now
}}

NB. Utility combinations with names I can remember
Load=: {{
 clear ''
 Do~ File y
 if. 0= 4!:0<'help' do. help end.
}}

Copy=: {{
 Do~ File y
}}

Do=: {{
 0!:101 y
:
 if. x-: y do. x=. 100 end.
 0!:x y
}}

Names=: {{
 NB. List names, ''=all, 0=noun, 1=adverb, 2=conjunction, 3=verb
 Across (/:Keys)~ (;:'y')-.~ 4!:1 y, (y-: '')# i.4
:
 NB. List locales, ''=all, 0=named, 1=numbered
 Across (/:Keys)~ 18!:1 y, (y-: '')# i.2
}}

New=: {{
 locale=. 18!:3 ''  NB. Create an object
 locale 18!:2~ 18!:2 <'base'  NB. Give it the name search path of base
 locale [Do~ File__locale y
}}

PS=: New ''

cocurrent 'base'
)

jPlay File 'jPlayInit'  NB. Save this version